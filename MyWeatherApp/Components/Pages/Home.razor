@page "/"
@rendermode InteractiveServer

<PageTitle>Home</PageTitle>
<h1>Welcome to your Weather Buddy!</h1>
<h4>To start, enter a city and select a state. Then press the GO button.</h4>
<h4>To see a new forecast for a different location, enter a new city and state and press the GO button again.</h4>

<label>
    City
</label>
<input type="text" @bind="@cityName" />
<br />
<br />
<label>
    State
</label>
<select @bind="@stateName">
    <option value="alabama">Alabama</option>
    <option value="alaska">Alaska</option>
    <option value="arizona">Arizona</option>
    <option value="arkansas">Arkansas</option>
    <option value="california">California</option>
    <option value="colorado">Colorado</option>
    <option value="connecticut">Connecticut</option>
    <option value="delaware">Delaware</option>
    <option value="florida">Florida</option>
    <option value="georgia">Georgia</option>
    <option value="hawaii">Hawaii</option>
    <option value="idaho">Idaho</option>
    <option value="illinois">Illinois</option>
    <option value="indiana">Indiana</option>
    <option value="iowa">Iowa</option>
    <option value="kansas">Kansas</option>
    <option value="kentucky">Kentucky</option>
    <option value="louisiana">Louisiana</option>
    <option value="maine">Maine</option>
    <option value="maryland">Maryland</option>
    <option value="massachusetts">Massachusetts</option>
    <option value="michigan">Michigan</option>
    <option value="minnesota">Minnesota</option>
    <option value="mississippi">Mississippi</option>
    <option value="missouri">Missouri</option>
    <option value="montana">Montana</option>
    <option value="nebraska">Nebraska</option>
    <option value="nevada">Nevada</option>
    <option value="new hampshire">New Hampshire</option>
    <option value="new jersey">New Jersey</option>
    <option value="new mexico">New Mexico</option>
    <option value="new york">New York</option>
    <option value="north carolina">North Carolina</option>
    <option value="north dakota">North Dakota</option>
    <option value="ohio">Ohio</option>
    <option value="oklahoma">Oklahoma</option>
    <option value="oregon">Oregon</option>
    <option value="pennsylvania">Pennsylvania</option>
    <option value="rhode island">Rhode Island</option>
    <option value="south carolina">South Carolina</option>
    <option value="south dakota">South Dakota</option>
    <option value="tennessee">Tennessee</option>
    <option value="texas">Texas</option>
    <option value="utah">Utah</option>
    <option value="vermont">Vermont</option>
    <option value="virginia">Virginia</option>
    <option value="washington">Washington</option>
    <option value="west virginia">West Virginia</option>
    <option value="wisconson">Wisconson</option>
    <option value="wyoming">Wyoming</option>
</select>
<br />
<br />
<button class="btn btn-primary" @onclick="ProcessInput">GO</button>

<br />
<br />

@if (errorString != "")
{
    <p>@errorString</p>
}
else if (hourlyForecastProps != null && futureForecastProps != null)
{
    <h3>12-Hour Forecast</h3>
    <table class="table">
        <thead>
            <tr>
                <th>
                    Time
                </th>
                <th>
                    Temperature
                </th>
                <th>
                    Wind Speed
                </th>
                <th>
                    Wind Direction
                </th>
                <th>
                    Description
                </th>
            </tr>
        </thead>
        <tbody>
        @for (int i = 0; i < 12; i++)
            {

            <tr>
                <td>
                    @hourlyForecastProps.periods[i].startTime.ToShortTimeString()
                </td>
                <td>
                    @hourlyForecastProps.periods[i].temperature&deg;
                </td>
                <td>
                    @hourlyForecastProps.periods[i].windSpeed
                </td>
                <td>
                    @hourlyForecastProps.periods[i].windDirection
                </td>
                <td>
                    @hourlyForecastProps.periods[i].shortForecast
                </td>
            </tr>
            }
        </tbody>
    </table>
    <br/><br/><br/>
    <h3>Weekly Forecast</h3>
    <table class="table">
        <thead>
            <tr>
                <th>
                    Name
                </th>
                <th>
                    High
                </th>
                <th>
                    Low
                </th>
                <th>
                    Time
                </th>
                <th>
                    Wind Speed
                </th>
                <th>
                    Wind Direction
                </th>
                <th>
                    Description
                </th>
            </tr>
        </thead>
        <tbody>
        @for (int i = 0; i < futureForecastProps.periods.Length; i++)
            {
            <tr>
                <td>
                    @futureForecastProps.periods[i].name
                </td>
                @if (futureForecastProps.periods[i].GetHighTemp() == null)
                    {
                    <td>Unknown</td>
                    }
                    else
                    {
                    <td>
                        @futureForecastProps.periods[i].GetHighTemp()&deg;
                    </td>
                    }
                @if (futureForecastProps.periods[i].GetLowTemp() == null)
                    {
                    <td>Unknown</td>
                    }
                    else
                    {
                    <td>
                        @futureForecastProps.periods[i].GetLowTemp()&deg;
                    </td>
                    }
                <td>
                    @futureForecastProps.periods[i].startTime.ToShortTimeString()
                </td>
                <td>
                    @futureForecastProps.periods[i].windSpeed
                </td>
                <td>
                    @futureForecastProps.periods[i].windDirection
                </td>
                <td>
                    @futureForecastProps.periods[i].detailedForecast
                </td>
            </tr>
            }
        </tbody>
    </table>
}

@code {
    public string? cityName { get; set; }
    public string? stateName { get; set; } = "alabama";
    public string? errorString { get; set; } = string.Empty;
    public GeocodeMapLocation? foundLocation { get; set; }
    public NWSPointProperties? point { get; set; }
    public NWSForecastProperties? hourlyForecastProps { get; set; }
    public NWSForecastProperties? futureForecastProps { get; set; }
    private Uri nwsWeatherUri = new Uri("https://api.weather.gov/");
    private Uri geocodeMapsUri = new Uri("https://geocode.maps.co/");

    /// <summary>
    /// Process the user input in the city name text field.
    /// - Validates proper format of text
    /// - Makes API call to geocode.maps.co
    /// - Verifies the city and state given by user match the API response
    /// - Makes an API call to NWS with the lat/lon to get relevant weather URLs
    /// - Makes API calls to NWS with the relevant weather URLs to populate page with data
    /// - Catches any exceptions that occur
    /// </summary>
    public void ProcessInput()
    {
        // TODO try catch will go in here
        try
        {
            errorString = string.Empty;
            ValidateInput();
            GetLatAndLon();
            point = GetForecastURLs();
            GetHourlyForecast();
            GetFutureForecast();

        } catch (NoLocationMatched nl)
        {
            errorString = nl.Message;

        } catch (InvalidCityOrStateException ic)
        {
            errorString = ic.Message;
        }
        catch (HttpRequestException hr)
        {
                if (hr.Message == "Too Many Requests")
            {
                    errorString = "Number of requests exceeded the API's limit. Try your request again.";
            } else if (hr.Message == "Bad Request")
            {
                    errorString = "Request was poorly formed. Contact the website designer.";
            } else if (hr.Message == "Not Found")
            {
                    errorString = "There was something wrong with your query. Check the spelling of the city name and try again.";
            }
            else
            {
                errorString = "There was a problem with the API call. Please try again.";
            }
        }
        catch (Exception ex)
        {
            errorString = "There was something wrong with your query. Try entering a valid city and state again.";
        }

    }

    /// <summary>
    /// Validates that the city name input by user is of a valid format.
    /// A valid format for a city name includes upper and lowercase characters, punctuation, and whitespace.
    /// An invalid format for a city name generates a relevant exception.
    /// </summary>
    /// <exception cref="Exception"></exception>
    public void ValidateInput()
    {
        // Makes sure the city name has a value and is not just white space
        if (String.IsNullOrWhiteSpace(cityName))
        {
            throw new InvalidCityOrStateException("Invalid city name.");
        }

        // Makes sure each letter in the city name is one of the following: uppercase/lowercase letter, punctuation, or whitespace
        foreach (char letter in cityName)
        {
            if (!Char.IsAsciiLetter(letter) && letter != '.' && letter != '\'' && letter != '-' && !Char.IsWhiteSpace(letter))
                throw new InvalidCityOrStateException($"Invalid city name.");
        }

        ExpandCommonCityAbbreviations();
    }

    /// <summary>
    /// Gets the NWSPoint for the given lat/lon. This is done via an API call and deserializing the resulting JSON obj
    /// </summary>
    public NWSPointProperties GetForecastURLs()
    {
        NWSPointProperties nwsPoint;

        HttpClient locationClient = new HttpClient();
        locationClient.BaseAddress = nwsWeatherUri;
        locationClient.DefaultRequestHeaders.UserAgent.ParseAdd("chelseaberger13gmail.com");
        locationClient.DefaultRequestHeaders.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/ld+json"));
        HttpResponseMessage response = locationClient.GetAsync($"/points/{foundLocation.latitude},{foundLocation.longitude}").Result;

        if (response != null && response.IsSuccessStatusCode)
        {
            nwsPoint = response.Content.ReadFromJsonAsync<NWSPointProperties>().Result;
            RemoveUrlPrefixFromForecast(ref nwsPoint);
            return nwsPoint;

        }
        else
        {
            throw new HttpRequestException(response.ReasonPhrase);
        }



    }

    /// <summary>
    /// Gets the lat/lon of the given city and state. This is done via an API call to geocode.maps and
    /// deserializing the resulting JSON obj.
    /// </summary>
    public void GetLatAndLon()
    {

        // Generate new HttpClient, set base address for geocode.maps API
        HttpClient latLonClient = new HttpClient();
        latLonClient.BaseAddress = geocodeMapsUri;

        // Generate a response, do it synchronously, this is the only thing we care about
        HttpResponseMessage? response = latLonClient.GetAsync($"search?city={cityName.Replace(' ', '+').ToLower()}&state={stateName.Replace(' ', '+').ToLower()}&country=US&api_key=669f4abe7921a061435276bwl2147a6").Result;

        if (response == null)
        {
            throw new NoLocationMatched(CreateNoLocationExceptionMessage(cityName, stateName));
        }

        // If we receive an unsuccessful response, throw an exception with a reason
        if (!response.IsSuccessStatusCode)
            throw new Exception(response.ReasonPhrase);

        // Deserialize the response and put it in the GeocodeMaps
        List<GeocodeMapLocation> matchedLocations = JsonSerializer.Deserialize<List<GeocodeMapLocation>>(response.Content.ReadAsStream());

        // Determines which of the potential locations is the location we were actually searching for
        GetLocation(matchedLocations);


    }

    /// <summary>
    /// Sets the location object to a location that matches the city and state given by user.
    /// If no match is found, an exception is thrown.
    /// </summary>
    /// <param name="matchedLocations">A list of locations that were matched by the API call to geocode.maps.</param>
    /// <exception cref="NoLocationMatched"></exception>
    public void GetLocation(List<GeocodeMapLocation> matchedLocations)
    {
        foreach (var location in matchedLocations)
        {
            if (location.location.ToLower().Contains(cityName.ToLower()) && location.location.ToLower().Contains(stateName.ToLower()))
            {
                foundLocation = location;
                return;
            }
        }


        throw new NoLocationMatched(CreateNoLocationExceptionMessage(cityName, stateName));
    }

    /// <summary>
    /// Use the NWSPoint object (which contains URLs) to get the hourly forecast.
    /// </summary>
    /// <exception cref="HttpRequestException"></exception>
    public void GetHourlyForecast()
    {
        HttpClient hourlyForecastClient = new HttpClient();
        hourlyForecastClient.BaseAddress = nwsWeatherUri;
        hourlyForecastClient.DefaultRequestHeaders.UserAgent.ParseAdd("chelseaberger13gmail.com");
        hourlyForecastClient.DefaultRequestHeaders.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/ld+json"));
        HttpResponseMessage response = hourlyForecastClient.GetAsync(point.hourlyForecast).Result;

        if (response != null && response.IsSuccessStatusCode)
        {
            hourlyForecastProps = response.Content.ReadFromJsonAsync<NWSForecastProperties>().Result;

        }
        else
        {
            throw new HttpRequestException(response.ReasonPhrase);
        }

    }

    /// <summary>
    /// Use the NWSPoint object (which contains URLs) to get the future forecast.
    /// </summary>
    /// <exception cref="HttpRequestException"></exception>
    public void GetFutureForecast()
    {
        HttpClient futureForecastClient = new HttpClient();
        futureForecastClient.BaseAddress = nwsWeatherUri;
        futureForecastClient.DefaultRequestHeaders.UserAgent.ParseAdd("chelseaberger13gmail.com");
        futureForecastClient.DefaultRequestHeaders.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/ld+json"));
        HttpResponseMessage response = futureForecastClient.GetAsync(point.forecast).Result;

        if (response != null && response.IsSuccessStatusCode)
        {
            futureForecastProps = response.Content.ReadFromJsonAsync<NWSForecastProperties>().Result;

        }
        else
        {
            throw new HttpRequestException(response.ReasonPhrase);
        }

        // Fill in the high temp and low temp values in the forecast
        GetForecastHighsAndLows();


    }

    /// <summary>
    /// Fill in the forecasted highs and lows from the periods received from querying NWS API for forecast.
    /// A period where isDaytime == true, gives the high temp. A period where isDaytime == false, gives the low temp.
    /// There are two different scenarios: either the periods come in and start with a isDaytime == true (meaning we have a 
    /// high as the first in the data set returned to us) or periods start with isDaytime == false (meaning we have
    /// a low as the first in the data set returned to us). In the case of isDaytime == true, we will have highs and lows for all
    /// days in the period. This is the simplest case. In the case of isDaytime == false, we will only have a low for the first day
    /// in the period, and only have a high for the last day in the period. The rest of the days in the period will have a high
    /// and a low.
    /// For days that have both a high and a low, start with the first period object of the two periods. Use the temperature
    /// in the first period to set the high, use the temperature in the second period to set the low. Iterate through the
    /// periods two at a time. 
    /// </summary>
    private void GetForecastHighsAndLows()
    {

        // first in period has isDaytime == true, simple parsing, sets highs and lows for period[i] and period[i+1]
        if (futureForecastProps.periods[0].isDaytime)
        {
            for (int i = 0; i < futureForecastProps.periods.Length; i += 2)
            {
                futureForecastProps.periods[i].SetLowTemp(futureForecastProps.periods[i + 1].temperature);
                futureForecastProps.periods[i].SetHighTemp(futureForecastProps.periods[i].temperature);
                futureForecastProps.periods[i + 1].SetHighTemp(futureForecastProps.periods[i].temperature);
                futureForecastProps.periods[i + 1].SetLowTemp(futureForecastProps.periods[i + 1].temperature);

            }
        } else
        {

            // first in period has isDaytime == false, parse the first period then iterate through the list
            // starting at element 1
            futureForecastProps.periods[0].SetLowTemp(futureForecastProps.periods[0].temperature);

            for (int i = 1; i < futureForecastProps.periods.Length - 1; i += 2)
            {
                futureForecastProps.periods[i].SetLowTemp(futureForecastProps.periods[i + 1].temperature);
                futureForecastProps.periods[i].SetHighTemp(futureForecastProps.periods[i].temperature);
                futureForecastProps.periods[i + 1].SetHighTemp(futureForecastProps.periods[i].temperature);
                futureForecastProps.periods[i + 1].SetLowTemp(futureForecastProps.periods[i + 1].temperature);

            }

            // The last element will only have a low high in this case, so set that last
            int periodsLength = futureForecastProps.periods.Length;
            futureForecastProps.periods[periodsLength - 1].SetHighTemp(futureForecastProps.periods[periodsLength - 1].temperature);

        }

    }

    /// <summary>
    /// Returns an error message to be used by the NoLocationFoundException.
    /// This is done separately because the message capitalizes the name of the city and state properly, which takes
    /// some additional logic that would clog up other parts of code. 
    /// </summary>
    /// <param name="city">city name of location</param>
    /// <param name="state">state name of location</param>
    /// <returns>returns an error string that is ready to be used by the NoLocationFoundException</returns>
    public string CreateNoLocationExceptionMessage(string city, string state)
    {
        string[] cityStrings = city.Split(' ');
        string[] stateStrings = state.Split(' ');

        // Capitalize the first letter of each word in the state name
        for (int i = 0; i < stateStrings.Length; i++)
        {
            StringBuilder stateBuilder = new StringBuilder(stateStrings[i]);
            stateBuilder[0] = Char.ToUpper(stateBuilder[0]);
            stateStrings[i] = stateBuilder.ToString();
        }

        // Capitalize the first letter of each word in the city name
        for (int i = 0; i < cityStrings.Length; i++)
        {
            StringBuilder cityBuilder = new StringBuilder(cityStrings[i]);
            cityBuilder[0] = Char.ToUpper(cityBuilder[0]);
            cityStrings[i] = cityBuilder.ToString();
        }

        // Convert the string arrays back into just a singular string
        city = string.Empty;
        for (int i = 0; i < cityStrings.Length - 1; i++)
        {
            city += cityStrings[i] + " ";
        }
        city += cityStrings[cityStrings.Length - 1];

        state = string.Empty;
        for (int i = 0; i < stateStrings.Length - 1; i++)
        {
            state += stateStrings[i] + " ";
        }
        state += stateStrings[stateStrings.Length - 1];


        return $"A matching location was not found for {city}, {state}.";
    }

    /// <summary>
    /// When we get the nwsPoint object back from the GET call, it has the https://api.weather.gov/ prefixed to the URL.
    /// This is already assumed when we are using the object, so we want to remove it.
    /// Sets the value of forecast and hourlyForecast to just the parameters of their URI
    /// </summary>
    /// <param name="myPoint">point object that we would like to remove the prefix from</param>
    private void RemoveUrlPrefixFromForecast(ref NWSPointProperties myPoint)
    {
        if (myPoint.forecast.Contains(nwsWeatherUri.ToString()))
            myPoint.forecast = myPoint.forecast.Remove(0, 24);

        if (myPoint.hourlyForecast.Contains(nwsWeatherUri.ToString()))
            myPoint.hourlyForecast = myPoint.hourlyForecast.Remove(0, 24);
    }


    /// <summary>
    /// This function checks the city name for common abbreviations and replaces them with their expanded word.
    /// This aids in accurately finding locations.
    /// Source for common abbreviations:
    /// https://developer.cybersource.com/docs/cybs/en-us/tax-calculation/developer/all/rest/tax-calculation/tax-info-city-abbrevs.html
    /// The above is not an exhaustive list, and some were not implemented based on their unlikeliness to appear
    /// </summary>
    private void ExpandCommonCityAbbreviations()
    {
        string lowerCaseCityName = cityName.ToLower();
        if (lowerCaseCityName.Contains("st."))
        {
            //lowerCaseCityName = lowerCaseCityName.Replace("st.", "saint");
            cityName = lowerCaseCityName.Replace("st.", "saint");
        }
        else if (lowerCaseCityName.Contains("bch"))
        {
            lowerCaseCityName.Replace("bch.", "beach");
            cityName = lowerCaseCityName;
        }
        else if (lowerCaseCityName.Contains("crk"))
        {
            lowerCaseCityName.Replace("crk.", "creek");
            cityName = lowerCaseCityName;
        }
        else if (lowerCaseCityName.Contains("cty"))
        {
            lowerCaseCityName.Replace("cty.", "city");
            cityName = lowerCaseCityName;
        }
        else if (lowerCaseCityName.Contains("cyn"))
        {
            lowerCaseCityName.Replace("cyn.", "canyon");
            cityName = lowerCaseCityName;
        }
        else if (lowerCaseCityName.Contains("ft."))
        {
            lowerCaseCityName.Replace("ft.", "fort");
            cityName = lowerCaseCityName;
        }
        else if (lowerCaseCityName.Contains("mt."))
        {
            lowerCaseCityName.Replace("mt.", "mount");
            cityName = lowerCaseCityName;
        }
    }

    }

