@page "/"
@rendermode InteractiveServer

<PageTitle>Home</PageTitle>
<h1>Welcome to your Weather Buddy!</h1>
<h4>To start, enter a city and select a state. Then press the GO button.</h4>
<h4>To see a new forecast for a different location, enter a new city and state and press the GO button again.</h4>

<label>
    City
</label>
<input type="text" @bind="@cityName" />
<br />
<br />
<label>
    State
</label>
<select @bind="@stateName">
    <option value="alabama">Alabama</option>
    <option value="alaska">Alaska</option>
    <option value="arizona">Arizona</option>
    <option value="arkansas">Arkansas</option>
    <option value="california">California</option>
    <option value="colorado">Colorado</option>
    <option value="connecticut">Connecticut</option>
    <option value="delaware">Delaware</option>
    <option value="florida">Florida</option>
    <option value="georgia">Georgia</option>
    <option value="hawaii">Hawaii</option>
    <option value="idaho">Idaho</option>
    <option value="illinois">Illinois</option>
    <option value="indiana">Indiana</option>
    <option value="iowa">Iowa</option>
    <option value="kansas">Kansas</option>
    <option value="kentucky">Kentucky</option>
    <option value="louisiana">Louisiana</option>
    <option value="maine">Maine</option>
    <option value="maryland">Maryland</option>
    <option value="massachusetts">Massachusetts</option>
    <option value="michigan">Michigan</option>
    <option value="minnesota">Minnesota</option>
    <option value="mississippi">Mississippi</option>
    <option value="missouri">Missouri</option>
    <option value="montana">Montana</option>
    <option value="nebraska">Nebraska</option>
    <option value="nevada">Nevada</option>
    <option value="new hampshire">New Hampshire</option>
    <option value="new jersey">New Jersey</option>
    <option value="new mexico">New Mexico</option>
    <option value="new york">New York</option>
    <option value="north carolina">North Carolina</option>
    <option value="north dakota">North Dakota</option>
    <option value="ohio">Ohio</option>
    <option value="oklahoma">Oklahoma</option>
    <option value="oregon">Oregon</option>
    <option value="pennsylvania">Pennsylvania</option>
    <option value="rhode island">Rhode Island</option>
    <option value="south carolina">South Carolina</option>
    <option value="south dakota">South Dakota</option>
    <option value="tennessee">Tennessee</option>
    <option value="texas">Texas</option>
    <option value="utah">Utah</option>
    <option value="vermont">Vermont</option>
    <option value="virginia">Virginia</option>
    <option value="washington">Washington</option>
    <option value="west virginia">West Virginia</option>
    <option value="wisconson">Wisconson</option>
    <option value="wyoming">Wyoming</option>
</select>
<br />
<br />
<button class="btn btn-primary" @onclick="ProcessInput">GO</button>

<br />
<br />

@if (errorString != "")
{
    <p>@errorString</p>
}
else if (hourlyForecastProps != null && futureForecastProps != null)
{
    <h3>12-Hour Forecast</h3>
    <table class="table">
        <thead>
            <tr>
                <th>
                    Time
                </th>
                <th>
                    Temperature
                </th>
                <th>
                    Wind Speed
                </th>
                <th>
                    Wind Direction
                </th>
                <th>
                    Description
                </th>
            </tr>
        </thead>
        <tbody>
        @for (int i = 0; i < 12; i++)
        {
                
            <tr>
                <td>
                    @hourlyForecastProps.periods[i].startTime.ToShortTimeString()
                </td>
                <td>
                    @hourlyForecastProps.periods[i].temperature&deg;
                </td>
                <td>
                    @hourlyForecastProps.periods[i].windSpeed
                </td>
                <td>
                    @hourlyForecastProps.periods[i].windDirection
                </td>
                <td>
                    @hourlyForecastProps.periods[i].shortForecast
                </td>
            </tr>
        }
        </tbody>
    </table>
    <br/><br/><br/>
    <h3>Weekly Forecast</h3>
    <table class="table">
        <thead>
            <tr>
                <th>
                    Name
                </th>
                <th>
                    Temperature
                </th>
                <th>
                    Time
                </th>
                <th>
                    Wind Speed
                </th>
                <th>
                    Wind Direction
                </th>
                <th>
                    Description
                </th>
            </tr>
        </thead>
        <tbody>
        @foreach (var period in futureForecastProps.periods)
        {
            <tr>
                <td>
                    @period.name
                </td>
                <td>
                    @period.temperature&deg;
                </td>
                <td>
                    @period.startTime.ToShortTimeString()
                </td>
                <td>
                    @period.windSpeed
                </td>
                <td>
                    @period.windDirection
                </td>
                <td>
                    @period.detailedForecast
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    public string? cityName { get; set; }
    public string? stateName { get; set; } = "alabama";
    public string? errorString { get; set; } = string.Empty;
    public GeocodeMapLocation? foundLocation { get; set; }
    public NWSPointProperties? point { get; set; }
    public NWSForecastProperties? hourlyForecastProps { get; set; }
    public NWSForecastProperties? futureForecastProps { get; set; }

    /// <summary>
    /// Process the user input in the city name text field.
    /// - Validates proper format of text
    /// - Makes API call to geocode.maps.co
    /// - Verifies the city and state given by user match the API response
    /// - Makes an API call to NWS with the lat/lon to get relevant weather URLs
    /// - Makes API calls to NWS with the relevant weather URLs to populate page with data
    /// - Catches any exceptions that occur
    /// </summary>
    public void ProcessInput()
    {
        // TODO try catch will go in here
        try
        {
            errorString = string.Empty;
            ValidateInput();
            GetLatAndLon();
            point = GetForecastURLs();
            GetHourlyForecast();
            GetFutureForecast();

        } catch (NoLocationMatched nl)
        {
            errorString = nl.Message;

        } catch (InvalidCityOrStateException ic)
        {
            errorString = ic.Message;
        }
        catch (Exception ex)
        {
            errorString = "There was something wrong with your query. Try entering a valid city and state again.";
        }

    }

    /// <summary>
    /// Validates that the city name input by user is of a valid format.
    /// A valid format for a city name includes upper and lowercase characters, punctuation, and whitespace.
    /// An invalid format for a city name generates a relevant exception.
    /// </summary>
    /// <exception cref="Exception"></exception>
    public void ValidateInput()
    {
        // Makes sure the city name has a value and is not just white space
        if (String.IsNullOrWhiteSpace(cityName))
        {
            throw new InvalidCityOrStateException("Invalid city name.");
        }

        // Makes sure each letter in the city name is one of the following: uppercase/lowercase letter, punctuation, or whitespace
        foreach (char letter in cityName)
        {
            if (!Char.IsAsciiLetter(letter) && letter != '.' && letter != '\'' && letter != '-' && !Char.IsWhiteSpace(letter))
                throw new InvalidCityOrStateException($"Invalid city name.");
        }
    }

    /// <summary>
    /// Gets the NWSPoint for the given lat/lon. This is done via an API call and deserializing the resulting JSON obj
    /// </summary>
    public NWSPointProperties GetForecastURLs()
    {
        NWSPointProperties nwsPoint;

        HttpClient locationClient = new HttpClient();
        locationClient.BaseAddress = new Uri("https://api.weather.gov/");
        locationClient.DefaultRequestHeaders.UserAgent.ParseAdd("chelseaberger13gmail.com");
        locationClient.DefaultRequestHeaders.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/ld+json"));
        HttpResponseMessage response = locationClient.GetAsync($"/points/{foundLocation.latitude},{foundLocation.longitude}").Result;

        if (response != null && response.IsSuccessStatusCode)
        {
            nwsPoint = response.Content.ReadFromJsonAsync<NWSPointProperties>().Result;
            return nwsPoint;

        }
        else
        {
            throw new HttpRequestException(response.ReasonPhrase);
        }



    }

    /// <summary>
    /// Gets the lat/lon of the given city and state. This is done via an API call to geocode.maps and
    /// deserializing the resulting JSON obj.
    /// </summary>
    public void GetLatAndLon()
    {

        // Generate new HttpClient, set base address for geocode.maps API
        HttpClient latLonClient = new HttpClient();
        latLonClient.BaseAddress = new Uri("https://geocode.maps.co/");

        // Generate a response, do it synchronously, this is the only thing we care about
        HttpResponseMessage? response = latLonClient.GetAsync($"search?city={cityName.Replace(' ', '+').ToLower()}&state={stateName.Replace(' ', '+').ToLower()}&country=US&api_key=669f4abe7921a061435276bwl2147a6").Result;

        if (response == null)
        {
            throw new NoLocationMatched(CreateNoLocationExceptionMessage(cityName, stateName));
        }

        // If we receive an unsuccessful response, throw an exception with a reason
        if (!response.IsSuccessStatusCode)
            throw new Exception(response.ReasonPhrase);

        // Deserialize the response and put it in the GeocodeMaps
        List<GeocodeMapLocation> matchedLocations = JsonSerializer.Deserialize<List<GeocodeMapLocation>>(response.Content.ReadAsStream());

        // Determines which of the potential locations is the location we were actually searching for
        GetLocation(matchedLocations);


    }

    /// <summary>
    /// Sets the location object to a location that matches the city and state given by user.
    /// If no match is found, an exception is thrown.
    /// </summary>
    /// <param name="matchedLocations">A list of locations that were matched by the API call to geocode.maps.</param>
    /// <exception cref="NoLocationMatched"></exception>
    public void GetLocation(List<GeocodeMapLocation> matchedLocations)
    {
        foreach (var location in matchedLocations)
        {
            if (location.location.ToLower().Contains(cityName.ToLower()) && location.location.ToLower().Contains(stateName.ToLower()))
            {
                foundLocation = location;
                return;
            }
        }

        
        throw new NoLocationMatched(CreateNoLocationExceptionMessage(cityName, stateName));
    }

    /// <summary>
    /// Use the NWSPoint object (which contains URLs) to get the hourly forecast.
    /// </summary>
    /// <exception cref="HttpRequestException"></exception>
    public void GetHourlyForecast()
    {
        HttpClient hourlyForecastClient = new HttpClient();
        hourlyForecastClient.BaseAddress = new Uri("https://api.weather.gov/");
        hourlyForecastClient.DefaultRequestHeaders.UserAgent.ParseAdd("chelseaberger13gmail.com");
        hourlyForecastClient.DefaultRequestHeaders.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/ld+json"));
        HttpResponseMessage response = hourlyForecastClient.GetAsync(point.hourlyForecast.Remove(0, 24)).Result;

        if (response != null && response.IsSuccessStatusCode)
        {
            hourlyForecastProps = response.Content.ReadFromJsonAsync<NWSForecastProperties>().Result;

        }
        else
        {
            throw new HttpRequestException(response.ReasonPhrase);
        }

    }

    /// <summary>
    /// Use the NWSPoint object (which contains URLs) to get the future forecast.
    /// </summary>
    /// <exception cref="HttpRequestException"></exception>
    public void GetFutureForecast()
    {
        HttpClient futureForecastClient = new HttpClient();
        futureForecastClient.BaseAddress = new Uri("https://api.weather.gov/");
        futureForecastClient.DefaultRequestHeaders.UserAgent.ParseAdd("chelseaberger13gmail.com");
        futureForecastClient.DefaultRequestHeaders.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/ld+json"));
        HttpResponseMessage response = futureForecastClient.GetAsync(point.forecast.Remove(0, 24)).Result;

        if (response != null && response.IsSuccessStatusCode)
        {
            futureForecastProps = response.Content.ReadFromJsonAsync<NWSForecastProperties>().Result;

        }
        else
        {
            throw new HttpRequestException(response.ReasonPhrase);
        }
    }

    public string CreateNoLocationExceptionMessage(string city, string state)
    {
        string[] cityStrings = city.Split(' ');
        string[] stateStrings = state.Split(' ');

        for (int i = 0; i < stateStrings.Length; i++)
        {
            StringBuilder stateBuilder = new StringBuilder(stateStrings[i]);
            stateBuilder[0] = Char.ToUpper(stateBuilder[0]);
            stateStrings[i] = stateBuilder.ToString();
        }

        for (int i = 0; i < cityStrings.Length; i++)
        {
            StringBuilder cityBuilder = new StringBuilder(cityStrings[i]);
            cityBuilder[0] = Char.ToUpper(cityBuilder[0]);
            cityStrings[i] = cityBuilder.ToString();
        }

        city = string.Empty;
        for (int i = 0; i < cityStrings.Length - 1; i++)
        {
            city += cityStrings[i] + " ";
        }
        city += cityStrings[cityStrings.Length - 1];

        state = string.Empty;
        for (int i = 0; i < stateStrings.Length - 1; i++)
        {
            state += stateStrings[i] + " ";
        }
        state += stateStrings[stateStrings.Length - 1];


        return $"A matching location was not found for {city}, {state}.";
    }
}

